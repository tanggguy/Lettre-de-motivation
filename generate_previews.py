import os
import subprocess
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def compile_latex_to_pdf(tex_filepath):
    """Compile un fichier .tex en .pdf et nettoie les fichiers temporaires."""
    directory = os.path.dirname(tex_filepath)
    filename = os.path.basename(tex_filepath)
    base_filename = os.path.splitext(filename)[0]

    command = [
        "pdflatex",
        "-interaction=nonstopmode",
        f"-output-directory={directory}",
        tex_filepath,
    ]

    try:
        logging.info(f"üìÑ Compilation de {filename} en PDF...")
        subprocess.run(command, check=True, capture_output=True, text=True)
        subprocess.run(command, check=True, capture_output=True, text=True)
        logging.info(f"‚úÖ PDF g√©n√©r√© avec succ√®s : {base_filename}.pdf")

        # Nettoyage des fichiers auxiliaires
        for ext in [".aux", ".log", ".tex"]:
            aux_file = os.path.join(directory, f"{base_filename}{ext}")
            if os.path.exists(aux_file):
                os.remove(aux_file)
        logging.info("üßπ Fichiers temporaires nettoy√©s.")
        return True

    except FileNotFoundError:
        logging.error(
            "‚ùå La commande 'pdflatex' est introuvable. Assurez-vous d'avoir une distribution LaTeX install√©e."
        )
        return False
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå Erreur lors de la compilation LaTeX pour {filename}.")
        logging.error("--- LOG LATEX ---")
        logging.error(e.stdout)
        logging.error(e.stderr)
        logging.error("--- FIN LOG ---")
        return False


def generate_preview_pdf(template_path, output_dir="output"):
    """
    G√©n√®re un PDF de pr√©visualisation d'un template avec des variables vides.

    Args:
        template_path: Chemin vers le fichier template .tex
        output_dir: Dossier de sortie pour les PDF
    """
    # Cr√©er le dossier de sortie s'il n'existe pas
    os.makedirs(output_dir, exist_ok=True)

    # Lire le contenu du template
    with open(template_path, "r", encoding="utf-8") as f:
        template_content = f.read()

    # Dictionnaire des variables √† remplacer
    variables = {
        "NOM_COMPLET": "Tanguy SAILLY",
        "ADRESSE": "Adresse compl√®te",
        "CODE_POSTAL": "Code postal Ville",
        "EMAIL": "email@example.com",
        "TELEPHONE": "06 XX XX XX XX",
        "POSTE_VISE": "Intitul√© du poste",
        "NOM_ENTREPRISE": "Nom de l'entreprise",
        "ADRESSE_ENTREPRISE": "Adresse de l'entreprise",
        "CORPS_LETTRE": """ Les missions que vous d√©crivffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff fffffffffffffff fffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff vffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff ffffffffffffffffffffffffff fjhdgzdfgzdfSfdscaszx ffffffffffez, centr√©es sur la conception et le d√©veloppement de solutions d‚Äôing√© nierie m√©canique, la r√©alisation de calculs et d‚Äôanalyses de conception, ainsi que la participation au d√©veloppement de simulateurs et d‚Äôapplications 3D, sont en parfaite ad√©quation avec mon projet professionnel. L‚Äôopportunit√© de contribuer √† des projets exigeant une qualit√© d‚Äôex√©cution sans faille, de l‚Äôinnovation et une approche pragmatique, valeurs que SOGECLAIR met en avant, me motive particuli√®rement. Ma formation m‚Äôa permis d‚Äôacqu√©rir de solides comp√©tences en ing√©nierie m√©canique et design, notamment en mod√©lisation 3D, simulation et calcul technique. Je ma√Ætrise des logiciels comme SolidWorks, Catia et Abaqus pour la mod√©lisation de pi√®ces et assemblages, la mise en plan, la simulation et le calcul par √©l√©ments finis avec RDM7. Mes solides connaissances des mat√©riaux et des proc√©d√©s de fabrication constituent √©galement un atout. Par ailleurs, mon exp√©rience d‚Äôautomaticien stagiaire chez Groupe API, o√π j‚Äôai ≈ìuvr√© √† l‚Äôoptimisation informatique et au d√©veloppement de logiques de contr√¥le (Grafcet), combin√©e √† mes comp√©tences en Python et Java, d√©montre ma capacit√© √† appr√©hender des environnements techniques complexes et √† participer √† des d√©veloppements fonctionnels, essentiels dans le domaine du Digital Engineering. Je suis √©galement dot√© des qualit√©s transversales essentielles √† la r√©ussite des projets d‚Äôenvergure. Mon stage d‚Äôautomaticien m‚Äôa appris l‚Äôanalyse fonctionnelle, l‚Äôautonomie et la force de proposi tion, tandis que mes √©t√©s comme moniteur de voile au Centre nautique d‚ÄôErquy ont renforc√© mon esprit d‚Äô√©quipe, ma rigueur et mes aptitudes √† la communication et √† l‚Äôorganisation, des atouts pour la gestion de projet technique. Curieux et engag√©, je suis convaincu de pouvoir m‚Äôint√©grer rapidement √† vos √©quipes et d‚Äôapporter une contribution significative aux projets innovants de SOGECLAIR, notamment dans la recherche de solutions durables. Je suis particuli√®rement enthousiasm√© √† l‚Äôid√©e de mettre mes comp√©tences au service de SOGE CLAIR et de contribuer √† votre engagement pour l‚Äôexcellence et la satisfaction client. Ce stage repr√©senterait pour moi une occasion unique de m‚Äôinvestir dans un environnement stimulant et d‚Äô√©voluer au sein d‚Äôune entreprise reconnue pour son expertise. Je serais ravi de vous exposer plus en d√©tail ma motivation et mes aptitudes lors d‚Äôun entretien""",
    }

    # Remplacer les variables dans le template
    filled_content = template_content
    for key, value in variables.items():
        filled_content = filled_content.replace(f"%%{key}%%", value)

    # Nom du fichier de sortie
    template_name = Path(template_path).stem
    preview_name = f"{template_name}_preview"
    tex_output_path = os.path.join(output_dir, f"{preview_name}.tex")

    # √âcrire le fichier .tex avec les variables remplies
    with open(tex_output_path, "w", encoding="utf-8") as f:
        f.write(filled_content)

    logging.info(f"üìù Fichier .tex cr√©√© : {tex_output_path}")

    # Compiler en PDF
    success = compile_latex_to_pdf(tex_output_path)

    if success:
        pdf_path = os.path.join(output_dir, f"{preview_name}.pdf")
        logging.info(f"‚úÖ Pr√©visualisation g√©n√©r√©e : {pdf_path}")
    else:
        logging.error(f"‚ùå √âchec de la g√©n√©ration du PDF pour {template_name}")


def generate_all_previews():
    """G√©n√®re des PDF de pr√©visualisation pour tous les templates."""
    templates_dir = "templates"
    output_dir = "output"

    # Liste des templates
    template_files = [
        "lettre_template.tex",
        "lettre_template_elegant.tex",
        "lettre_template_moderne.tex",
        "lettre_template_minimaliste.tex",
    ]

    logging.info(f"\n{'='*60}")
    logging.info(f"üöÄ G√©n√©ration des pr√©visualisations de templates")
    logging.info(f"{'='*60}\n")

    for template_file in template_files:
        template_path = os.path.join(templates_dir, template_file)

        if os.path.exists(template_path):
            logging.info(f"\n{'‚îÄ'*60}")
            logging.info(f"üìã Traitement : {template_file}")
            logging.info(f"{'‚îÄ'*60}")
            generate_preview_pdf(template_path, output_dir)
            logging.info(f"{'‚îÄ'*60}\n")
        else:
            logging.warning(f"‚ö†Ô∏è  Template non trouv√© : {template_path}")

    logging.info(f"\n{'='*60}")
    logging.info(f"‚úÖ G√©n√©ration termin√©e ! Consultez le dossier '{output_dir}'")
    logging.info(f"{'='*60}\n")


if __name__ == "__main__":
    # G√©n√©rer toutes les pr√©visualisations
    generate_all_previews()
