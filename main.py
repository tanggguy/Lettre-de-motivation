import os
import json
import subprocess
import google.generativeai as genai
from dotenv import load_dotenv
import logging
from datetime import datetime

# Configuration du logging pour un meilleur suivi
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# --- 1. CHARGEMENT DE LA CONFIGURATION ---


def load_config():
    """Charge la cl√© API depuis .env et la configuration utilisateur depuis config.json."""
    try:
        load_dotenv()
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            logging.error(
                "Cl√© API Gemini non trouv√©e. Assurez-vous qu'elle est d√©finie dans le fichier .env"
            )
            return None, None

        with open("config.json", "r", encoding="utf-8") as f:
            user_config = json.load(f)

        return api_key, user_config
    except FileNotFoundError:
        logging.error("Le fichier 'config.json' est introuvable. Veuillez le cr√©er.")
        return None, None
    except Exception as e:
        logging.error(f"Erreur lors du chargement de la configuration : {e}")
        return None, None


# --- 2. INTERACTION AVEC L'API GEMINI ---


def extract_job_info(job_ad_text):
    """Extrait automatiquement les informations cl√©s de l'annonce avec Gemini."""

    prompt = f"""
    Tu es un expert en analyse d'annonces d'emploi. Analyse cette annonce et extrais les informations suivantes au format JSON strict.
    
    **Annonce :**
    ---
    {job_ad_text}
    ---
    
    **Instructions :**
    Retourne UNIQUEMENT un objet JSON valide avec cette structure exacte (sans markdown, sans commentaires) :
    {{
        "entreprise": "nom de l'entreprise",
        "poste": "titre exact du poste",
        "type_contrat": "CDI/CDD/Stage/Alternance/etc",
        "duree": "dur√©e si applicable (ex: 6 mois) sinon null",
        "localisation": "ville et/ou r√©gion",
        "date_debut": "date de d√©but souhait√©e si mentionn√©e, sinon null",
        "competences_requises": ["comp√©tence1", "comp√©tence2", "comp√©tence3"],
        "outils_technologies": ["outil1", "outil2"],
        "niveau_etudes": "niveau requis (ex: Bac+5, Ing√©nieur)",
        "langues": {{"francais": "niveau", "anglais": "niveau"}},
        "salaire": "si mentionn√©, sinon null",
        "avantages": ["avantage1", "avantage2"],
        "missions_principales": ["mission1", "mission2", "mission3"],
        "secteur": "secteur d'activit√© de l'entreprise",
        "valeurs_entreprise": ["valeur1", "valeur2"],
        "ton_annonce": "formel/moderne/startup/etc"
    }}
    
    Si une information n'est pas disponible, utilise null ou une liste vide selon le type.
    """

    try:
        logging.info("üîç Extraction des informations de l'annonce...")
        model = genai.GenerativeModel("gemini-2.5-flash")
        response = model.generate_content(prompt)

        # Nettoyer la r√©ponse pour extraire uniquement le JSON
        text = response.text.strip()

        # Enlever les balises markdown si pr√©sentes
        if text.startswith("```json"):
            text = text[7:]
        if text.startswith("```"):
            text = text[3:]
        if text.endswith("```"):
            text = text[:-3]
        text = text.strip()

        job_info = json.loads(text)

        logging.info(f"‚úÖ Informations extraites :")
        logging.info(f"   - Entreprise : {job_info.get('entreprise', 'N/A')}")
        logging.info(f"   - Poste : {job_info.get('poste', 'N/A')}")
        logging.info(f"   - Type : {job_info.get('type_contrat', 'N/A')}")
        logging.info(f"   - Localisation : {job_info.get('localisation', 'N/A')}")
        logging.info(
            f"   - Comp√©tences requises : {', '.join(job_info.get('competences_requises', [])[:3])}..."
        )

        return job_info

    except json.JSONDecodeError as e:
        logging.error(f"‚ùå Erreur de parsing JSON : {e}")
        logging.error(f"R√©ponse brute : {response.text[:500]}")
        return None
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'extraction : {e}")
        return None


def calculate_match_score(user_profile, job_info):
    """Calcule un score de compatibilit√© entre le profil et l'annonce."""
    if not job_info:
        return None

    score = 0
    details = []

    user_skills = set([s.lower() for s in user_profile.get("competences_cles", [])])
    required_skills = set([s.lower() for s in job_info.get("competences_requises", [])])
    required_tools = set([s.lower() for s in job_info.get("outils_technologies", [])])

    # Matching des comp√©tences
    matching_skills = user_skills.intersection(required_skills)
    matching_tools = user_skills.intersection(required_tools)

    if matching_skills:
        score += len(matching_skills) * 20
        details.append(
            f"‚úì {len(matching_skills)} comp√©tences correspondent : {', '.join(matching_skills)}"
        )

    if matching_tools:
        score += len(matching_tools) * 15
        details.append(
            f"‚úì {len(matching_tools)} outils ma√Ætris√©s : {', '.join(matching_tools)}"
        )

    # Bonus si toutes les comp√©tences requises sont couvertes
    if required_skills and required_skills.issubset(user_skills):
        score += 20
        details.append("‚úì Toutes les comp√©tences requises sont ma√Ætris√©es !")

    score = min(score, 100)  # Plafonner √† 100

    return {
        "score": score,
        "details": details,
        "matching_skills": list(matching_skills),
        "matching_tools": list(matching_tools),
        "missing_skills": list(required_skills - user_skills),
    }


def generate_letter_body(user_profile, job_ad_text, job_info=None):
    """Construit le prompt et interroge l'API Gemini pour g√©n√©rer le corps de la lettre."""

    # Enrichir le prompt avec les informations extraites
    context_info = ""
    if job_info:
        context_info = f"""
    **Informations extraites de l'annonce :**
    - Entreprise : {job_info.get('entreprise', 'N/A')}
    - Poste : {job_info.get('poste', 'N/A')}
    - Type de contrat : {job_info.get('type_contrat', 'N/A')}
    - Localisation : {job_info.get('localisation', 'N/A')}
    - Secteur : {job_info.get('secteur', 'N/A')}
    - Missions principales : {', '.join(job_info.get('missions_principales', [])[:5])}
    - Comp√©tences cl√©s recherch√©es : {', '.join(job_info.get('competences_requises', [])[:5])}
    - Outils/Technologies : {', '.join(job_info.get('outils_technologies', []))}
    - Valeurs de l'entreprise : {', '.join(job_info.get('valeurs_entreprise', []))}
    - Ton de l'annonce : {job_info.get('ton_annonce', 'professionnel')}
    """

    # Construction d'un prompt d√©taill√© pour guider le mod√®le
    prompt = f"""
    Tu es un expert en recrutement et un excellent r√©dacteur. Ta mission est de r√©diger le corps d'une lettre de motivation percutante et personnalis√©e en fran√ßais.

    **Voici les informations sur le candidat :**
    - Nom : {user_profile.get('nom_complet', 'N/A')}
    - Mon profil r√©sum√© : {user_profile.get('resume_personnel', 'N/A')}
    - Mes comp√©tences cl√©s : {', '.join(user_profile.get('competences_cles', []))}

    {context_info}

    **Voici l'annonce compl√®te pour contexte :**
    ---
    {job_ad_text}
    ---

    **Instructions strictes :**
    - Adapte la lettre suivante √† l'annonce fournie en mettant en avant les comp√©tences et exp√©riences du candidat qui correspondent le mieux aux exigences du poste et aux comp√©tences du candidat: 
    
    "Actuellement √©tudiant en avant derni√®re ann√©e d'ecole d'ing√©nieur √† l'IMT Nord Europe (Anciennement Mines de Douai), sp√©cialis√© en conception m√©canique, votre offre de stage en hydrodynamique navale a capt√© mon attention. Passionn√© par l'architecture navale et les d√©fis hydrodynamiques, l'opportunit√© de rejoindre Naval Group est extr√™mement motivante. 
    
    Les missions que vous proposez, centr√©es sur l'am√©lioration des outils de calcul de tenue √† la mer, correspondent √† mon projet professionnel. L'id√©e de contribuer √† l'optimisation des car√®nes et √† la pr√©diction des performances de navires est une occasion unique de mettre en application mes connaissances th√©oriques. 
    
    Ma formation en conception m√©canique m'a permis de d√©velopper des comp√©tences solides en simulation et en calcul par √©l√©ments finis, notamment avec des logiciels comme Abaqus. Mes connaissances en programmation, particuli√®rement en Python, alli√©es √† des bases en m√©canique des fluides, me semblent √™tre des atouts majeurs pour prendre en main vos outils, analyser des r√©sultats et proposer des am√©liorations pertinentes. 
    
    Mes exp√©riences pass√©es, y compris celle de moniteur de voile, m'ont appris √† √™tre rigoureux, organis√© et √† bien communiquer, des qualit√©s essentielles pour travailler efficacement en √©quipe sur des projets d'envergure. 
    
    Pratiquant les sports nautiques, je suis particuli√®rement sensible aux enjeux de la performance hydrodynamique. Je suis curieux, force de proposition et tr√®s motiv√© √† l'id√©e de m'investir dans un projet qui aura une r√©elle valeur ajout√©e pour votre √©quipe."

    - **IMPORTANT** : Utilise les informations extraites ci-dessus pour personnaliser la lettre (mentionne le nom de l'entreprise, adapte au secteur, reprends les valeurs)
    - Adapte le ton √† celui de l'annonce (plus moderne pour startup, plus formel pour grand groupe)
    - Pr√©cise bien (anciennement Mines de Douai)
    - Mets en √©vidence les comp√©tences du candidat qui matchent avec celles recherch√©es
    - Sois concis et va droit au but, en √©vitant les r√©p√©titions inutiles.
    - Utilise des exemples concrets tir√©s du profil du candidat pour illustrer ses comp√©tences
    - Personnalise pour que l'entreprise voie que cette lettre lui est adress√©e sp√©cifiquement
    - Utilise un langage professionnel simple sans √™tre pompeux
    - Le ton doit √™tre professionnel, sans tournure de phrase lourde, evite les formulations convenues , le vocabulaire et les expressions doivent etre courantes et fluides. 
    - N'utilise pas de ** ** ou de _ _ pour mettre en valeur des mots.
    - **IMPORTANT** : Ne g√©n√®re **UNIQUEMENT** que le corps de la lettre. N'inclus PAS "Cher Monsieur/Madame", l'objet, l'adresse, la date, ou la formule de politesse finale. Commence directement par le premier paragraphe,fait des alineas au debut de chaque paragraphe.2500 caract√®res maximum espace compris.
    """

    try:
        logging.info("üìù G√©n√©ration du corps de la lettre...")
        model = genai.GenerativeModel("gemini-2.5-flash")
        response = model.generate_content(prompt)
        logging.info("‚úÖ R√©ponse de l'API Gemini re√ßue.")
        return response.text
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'appel √† l'API Gemini : {e}")
        return None


# --- 3. MANIPULATION DES FICHIERS ET COMPILATION LATEX ---


def compile_latex_to_pdf(tex_filepath):
    """Compile un fichier .tex en .pdf et nettoie les fichiers temporaires."""
    directory = os.path.dirname(tex_filepath)
    filename = os.path.basename(tex_filepath)
    base_filename = os.path.splitext(filename)[0]

    # La commande pour compiler. L'option -interaction=nonstopmode √©vite que le script se bloque en cas d'erreur LaTeX.
    command = [
        "pdflatex",
        "-interaction=nonstopmode",
        f"-output-directory={directory}",
        tex_filepath,
    ]

    try:
        logging.info(f"üìÑ Compilation de {filename} en PDF...")
        # On lance la compilation 2 fois pour s'assurer que les r√©f√©rences sont correctes (table des mati√®res, etc.)
        subprocess.run(command, check=True, capture_output=True, text=True)
        subprocess.run(
            command, check=True, capture_output=True, text=True
        )  # Seconde passe
        logging.info(f"‚úÖ PDF g√©n√©r√© avec succ√®s : {base_filename}.pdf")

        # Nettoyage des fichiers auxiliaires
        for ext in [".aux", ".log", ".tex"]:
            aux_file = os.path.join(directory, f"{base_filename}{ext}")
            if os.path.exists(aux_file):
                os.remove(aux_file)
        logging.info("üßπ Fichiers temporaires nettoy√©s.")
        return True

    except FileNotFoundError:
        logging.error(
            "‚ùå La commande 'pdflatex' est introuvable. Assurez-vous d'avoir une distribution LaTeX install√©e et dans votre PATH."
        )
        return False
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå Erreur lors de la compilation LaTeX pour {filename}.")
        logging.error("--- LOG LATEX ---")
        logging.error(e.stdout)
        logging.error(e.stderr)
        logging.error("--- FIN LOG ---")
        logging.error(f"Le fichier .log complet se trouve dans le dossier {directory}")
        return False


def save_job_metadata(job_info, match_info, output_path):
    """Sauvegarde les m√©tadonn√©es de l'annonce et du matching."""
    if not job_info:
        return

    metadata = {
        "job_info": job_info,
        "match_score": match_info,
        "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    }

    metadata_path = output_path.replace(".pdf", "_metadata.json")
    with open(metadata_path, "w", encoding="utf-8") as f:
        json.dump(metadata, f, ensure_ascii=False, indent=2)

    logging.info(f"üíæ M√©tadonn√©es sauvegard√©es : {os.path.basename(metadata_path)}")


def select_template_by_tone(job_info):
    """
    S√©lectionne automatiquement le meilleur template selon le ton de l'annonce
    et le secteur de l'entreprise.
    """
    if not job_info:
        return "lettre_template.tex"  # Template par d√©faut

    ton = job_info.get("ton_annonce", "").lower()
    secteur = job_info.get("secteur", "").lower()
    entreprise = job_info.get("entreprise", "").lower()

    # R√®gles de s√©lection
    # Version 2 (Moderne) pour startups, tech, innovation
    if any(
        keyword in ton for keyword in ["startup", "moderne", "innovant", "dynamique"]
    ):
        return "lettre_template_moderne.tex"

    if any(
        keyword in secteur for keyword in ["tech", "digital", "innovation", "software"]
    ):
        return "lettre_template_moderne.tex"

    # Version 3 (Minimaliste) pour conseil, finance, luxe
    if any(keyword in secteur for keyword in ["conseil", "finance", "audit", "banque"]):
        return "lettre_template_moderne.tex"

    if any(keyword in ton for keyword in ["formel", "sobre", "classique", "premium"]):
        return "lettre_template_moderne.tex"

    # Version 1 (√âl√©gante) pour industrie, grandes entreprises (d√©faut)
    return "lettre_template_moderne.tex"


def create_cover_letter(user_config, job_ad_path, templates_dict):
    """Orchestre la cr√©ation d'une lettre de motivation pour une annonce."""

    # Lecture de l'annonce
    with open(job_ad_path, "r", encoding="utf-8") as f:
        job_ad_text = f.read()

    # üÜï Extraction automatique des informations
    job_info = extract_job_info(job_ad_text)
    template_name = select_template_by_tone(job_info)
    template_content = templates_dict.get(
        template_name, templates_dict["lettre_template.tex"]
    )

    logging.info(f"üìÑ Template s√©lectionn√© : {template_name}")

    # üÜï Calcul du score de compatibilit√©
    if job_info:
        match_info = calculate_match_score(user_config, job_info)
        if match_info:
            logging.info(f"üéØ Score de compatibilit√© : {match_info['score']}/100")
            for detail in match_info["details"]:
                logging.info(f"   {detail}")
            if match_info["missing_skills"]:
                logging.warning(
                    f"‚ö†Ô∏è  Comp√©tences manquantes : {', '.join(match_info['missing_skills'])}"
                )
    else:
        match_info = None

    # G√©n√©ration du corps de la lettre via Gemini (avec infos extraites)
    letter_body = generate_letter_body(user_config, job_ad_text, job_info)
    if not letter_body:
        return

    # Remplacement des placeholders dans le template
    final_tex_content = template_content
    for key, value in user_config.items():
        if isinstance(value, list):
            value = ", ".join(value)
        final_tex_content = final_tex_content.replace(f"%%{key.upper()}%%", str(value))

    final_tex_content = final_tex_content.replace("%%CORPS_LETTRE%%", letter_body)

    # üÜï Utiliser les infos extraites pour le titre et l'entreprise
    if job_info:
        poste = job_info.get("poste", "Candidature")
        entreprise = job_info.get("entreprise", "Nom de l'entreprise")
        final_tex_content = final_tex_content.replace("%%POSTE_VISE%%", poste)
        final_tex_content = final_tex_content.replace("%%NOM_ENTREPRISE%%", entreprise)

        poste_clean = (
            poste.replace("-", "")
            .replace(" ", "_")
            .replace("/", "_")
            .replace("\\", "_")
        )
        entreprise_clean = entreprise.replace(" ", "_")

        # Utiliser le nom de l'entreprise pour le fichier
        output_filename_base = f"lettre_motivation_{entreprise_clean}_{poste_clean}"

    else:
        # Fallback sur l'ancien syst√®me
        base_name = (
            os.path.splitext(os.path.basename(job_ad_path))[0]
            .replace("_", " ")
            .replace("annonce", "")
            .strip()
        )
        final_tex_content = final_tex_content.replace(
            "%%POSTE_VISE%%", base_name.title()
        )
        final_tex_content = final_tex_content.replace(
            "%%NOM_ENTREPRISE%%", "Nom de l'entreprise"
        )
        output_filename_base = f"lettre_motivation_{base_name.replace(' ', '_')}"

    final_tex_content = final_tex_content.replace(
        "%%ADRESSE_ENTREPRISE%%", "Adresse de l'entreprise"
    )

    # √âcriture et compilation du fichier LaTeX
    tex_filepath = os.path.join("output", f"{output_filename_base}.tex")
    pdf_filepath = os.path.join("output", f"{output_filename_base}.pdf")

    with open(tex_filepath, "w", encoding="utf-8") as f:
        f.write(final_tex_content)

    success = compile_latex_to_pdf(tex_filepath)

    # üÜï Sauvegarder les m√©tadonn√©es
    if success and job_info:
        save_job_metadata(job_info, match_info, pdf_filepath)


# --- 4. POINT D'ENTR√âE PRINCIPAL ---


def main():
    """Fonction principale qui ex√©cute le script."""
    api_key, user_config = load_config()
    if not api_key or not user_config:
        return

    genai.configure(api_key=api_key)

    # D√©finition des chemins
    input_dir = "input"
    output_dir = "output"
    templates_dir = "templates"

    # V√©rification
    if not os.path.isdir(input_dir):
        logging.error(f"‚ùå Le dossier '{input_dir}' est introuvable.")
        return
    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)
        logging.info(f"üìÅ Dossier '{output_dir}' cr√©√©.")

    # üÜï CHARGEMENT DE TOUS LES TEMPLATES
    templates_dict = {}
    template_files = [
        "lettre_template.tex",  # Original (fallback)
        "lettre_template_elegant.tex",  # Version 1
        "lettre_template_moderne.tex",  # Version 2
        "lettre_template_minimaliste.tex",  # Version 3
    ]

    for template_file in template_files:
        template_path = os.path.join(templates_dir, template_file)
        if os.path.exists(template_path):
            with open(template_path, "r", encoding="utf-8") as f:
                templates_dict[template_file] = f.read()
            logging.info(f"‚úÖ Template charg√© : {template_file}")
        else:
            logging.warning(f"‚ö†Ô∏è  Template non trouv√© : {template_file}")

    if not templates_dict:
        logging.error("‚ùå Aucun template disponible!")
        return

    # Traitement de chaque annonce dans le dossier input
    job_ads = [f for f in os.listdir(input_dir) if f.endswith(".txt")]
    if not job_ads:
        logging.warning(f"‚ö†Ô∏è  Aucun fichier .txt trouv√© dans le dossier '{input_dir}'.")
        return

    logging.info(f"\n{'='*60}")
    logging.info(f"üöÄ G√©n√©ration de {len(job_ads)} lettre(s) de motivation")
    logging.info(f"{'='*60}\n")

    for i, job_ad_filename in enumerate(job_ads, 1):
        logging.info(f"\n{'‚îÄ'*60}")
        logging.info(f"üìã [{i}/{len(job_ads)}] Traitement : {job_ad_filename}")
        logging.info(f"{'‚îÄ'*60}")
        job_ad_path = os.path.join(input_dir, job_ad_filename)
        create_cover_letter(user_config, job_ad_path, templates_dict)
        logging.info(f"{'‚îÄ'*60}\n")

    logging.info(f"\n{'='*60}")
    logging.info(f"‚úÖ G√©n√©ration termin√©e ! Consultez le dossier '{output_dir}'")
    logging.info(f"{'='*60}\n")


if __name__ == "__main__":
    main()
